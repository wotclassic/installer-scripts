; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define BuildNumber "3"
#define GameVer "1.37.0.0"
#define GameMajorVer "37"
#define GameMiddleVer "0"
#define GameMinorVer "0"

#define MyAppName "«МТИ» - Белый Тигр Двойная Атака"
#define MyAppVersion GameVer+"#"+BuildNumber
#define AppBuild GameVer+"_"+BuildNumber
#define MyAppPublisher "Mr. Bendy"
#define MyAppURL "https://wot-classic.ru/"

[Setup]
AppId={{48C5FC30-9FDE-45BA-BC7F-E9FCFB29395E}
AppName={cm:AppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
OutputBaseFilename=wek_tiger_{#AppBuild}
ArchitecturesAllowed=x64compatible

VersionInfoProductName={#MyAppName}

DefaultDirName={code:GetLestaGamePath}

DefaultGroupName={cm:AppName}
DisableProgramGroupPage=yes
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
Compression=lzma2/max
; Compression=none
SolidCompression=yes
LZMAUseSeparateProcess=yes
LZMANumBlockThreads=6
DiskSpanning=no

WizardStyle=classic
WizardImageFile=wizard.png,wizard150.png,wizard200.png
WizardSmallImageFile=..\small_mt.png
SetupIconFile=..\mt.ico

;Uninstallable=WizardIsTaskSelected('uninstallable')
;UninstallFilesDir={app}\wek_tiger_uninst
;CreateUninstallRegKey=yes
Uninstallable=no

DirExistsWarning=no
DisableDirPage=no
; Change to auto before releasing
ShowLanguageDialog=yes
DisableWelcomePage=no
FlatComponentsList=no
RestartIfNeededByRun=no
AppendDefaultDirName=no

[Languages]
Name: "ru"; MessagesFile: "Russian.isl"; InfoBeforeFile: "infobefore.txt"
Name: "en"; MessagesFile: "English.isl"; InfoBeforeFile: "infobefore_en.txt"

;[Tasks]
;Name: "uninstallable"; Description: {cm:Uninstallable}

[Files]
Source: "files\configs\*"; DestDir: "{app}\mods\configs"; Flags: ignoreversion recursesubdirs createallsubdirs skipifsourcedoesntexist
Source: "files\wek_wt\mods\*"; DestDir: "{app}\mods\{code:GetVersion}\wek_wt"; Flags: ignoreversion recursesubdirs createallsubdirs skipifsourcedoesntexist
Source: "files\wek_wt\res_mods\*"; DestDir: "{app}\res_mods\{code:GetVersion}"; Flags: ignoreversion recursesubdirs createallsubdirs skipifsourcedoesntexist

;Source: "..\files\graphics\maps\mods\*"; DestDir: "{app}\mods\{code:GetVersion}\wek_maps"; Flags: recursesubdirs createallsubdirs skipifsourcedoesntexist onlyifdoesntexist
; Source: "..\files\graphics\maps\res_mods\*"; DestDir: "{app}\res_mods\{code:GetVersion}"; Flags: recursesubdirs createallsubdirs skipifsourcedoesntexist

;Source: "{app}\mods\{code:GetVersion}\wek_sd_models\ru.wot-classic.sd_germany.wotmod"; DestDir: "{app}\wek_tiger_uninst\backup\{code:GetVersion}\wek_sd_models"; Flags: external skipifsourcedoesntexist uninsneveruninstall
;Source: "{app}\mods\{code:GetVersion}\wek_locale_ru\ru.wot-classic.locale_ru.wotmod"; DestDir: "{app}\wek_tiger_uninst\backup\{code:GetVersion}\wek_locale_ru"; Flags: external skipifsourcedoesntexist uninsneveruninstall
;Source: "{app}\mods\{code:GetVersion}\wek_battle_gui\*"; DestDir: "{app}\wek_tiger_uninst\backup\{code:GetVersion}\wek_battle_gui"; Flags: external skipifsourcedoesntexist uninsneveruninstall
;Source: "{app}\mods\{code:GetVersion}\wek_sounds\*"; DestDir: "{app}\wek_tiger_uninst\backup\{code:GetVersion}\wek_sounds"; Flags: external skipifsourcedoesntexist uninsneveruninstall

[Run]
Filename: "{app}\{code:GetExecutableName}"; Description: {cm:RunGame}; Flags: nowait postinstall skipifsilent unchecked

[Messages]
ru.WelcomeLabel2=Программа установит мод [name] версии {#MyAppVersion} для «Мира Танков».%n%nРекомендуется закрыть клиент игры перед тем, как продолжить.

[CustomMessages]
ru.AppName={#MyAppName}
en.AppName=«MTO» - White Tiger Double Attack

;ru.Uninstallable=Создать программу удаления
;en.Uninstallable=Create uninstaller

ru.RunGame=Запустить игру
en.RunGame=Launch «Mir Tankov»

ru.FoundVersion=Найден клиент «Мира Танков» версии %s.
en.FoundVersion=«Mir Tankov» client version %s detected.
ru.MajVerMismatch=Мод создавался для версии %s, и его работоспособность не%nгарантируется. Рекомендуем проверить наличие более свежей версии на нашем%nпортале.
en.MajVerMismatch=The mod was designed to run on version %s, and there's no%nguarantee it will work. It is recommended to check for a newer version%non our website.
ru.MidVerMismatch=Мод создавался для версии %s, поэтому есть вероятность%nвозникновения проблем совместимости.
en.MidVerMismatch=The mod was designed to run on version %s, so you might%nencounter some compatibility issues.
ru.MinVerMismatch=Мод создавался для версии %s, но шанс возникновения проблем%nминимален.
en.MinVerMismatch=The mod was designed to run on version %s, but you should%nbe fine.
ru.VerMatch=Мод полностью совместим с данной версией игры.
en.VerMatch=The mod is fully compatible with your game client.
ru.OldVer=Ваша игра устарела. Обновите клиент перед установкой мода.
en.OldVer=Your game client is outdated. Please update it before proceeding.
ru.ClientNotFound=Клиент игры не найден. Пожалуйста, проверьте указанный путь.
en.ClientNotFound=The game client could not be found. Please make sure the path is set correctly.
ru.WebsiteButton=Наш сайт
en.WebsiteButton=Website
ru.NotFoundConfirm=Установщик не смог найти файлы игры по указанному пути.%n%nВы уверны, что хотите продолжить установку?
en.NotFoundConfirm=The installer could not detect a game client in the specified folder.%n%nAre you sure you want to install anyway?
ru.NewVerAvailable=Доступна новая версия установщика. Хотите скачать её?
en.NewVerAvailable=A new version is available. Do you want to download it?
ru.DevBuild=Вы используете раннюю сборку! Пожалуйста, дождитесь официального релиза перед установкой, чтобы избежать проблем.%n%nТехподдержка НЕ будет предоставлена, если вы установите моды сейчас.
en.DevBuild=You're using an early version of the installer! Please wait until the final release to avoid issues with your modded game.%n%nWe will NOT provide any kind of tech support if you install now.

[Code]
const
  CheckFileName = 'paths.xml';
  CurVersion = '{#GameVer}';
  CurMajorVersion = {#GameMajorVer};
  CurMiddleVersion = {#GameMiddleVer};
  CurMinorVersion = {#GameMinorVer};
  CurBuild = {#BuildNumber};
  
var
  FileStatusLabel: TLabel;
  VersionStatusLabel: TLabel;
  IsWoTExecFound: Boolean;
  SiteButton: TButton;
  DiscordButton: TButton;
  LatestMajorVersion: Integer;
  LatestMiddleVersion: Integer;
  LatestMinorVersion: Integer;
  LatestBuild: Integer;
  LatestLink: String;
  IsDevBuild: Boolean;

function StrSplit(Text: String; Separator: String): TArrayOfString;
begin
  Result := StringSplit(Text, [Separator], stAll);
end;

function LoadValueFromXML(const AFileName, APath: string): string;
var
  XMLNode: Variant;
  XMLDocument: Variant;  
begin
  Result := '';
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.load(AFileName);
    if (XMLDocument.parseError.errorCode <> 0) then
      MsgBox('Файл XML повреждён. ' + 
        XMLDocument.parseError.reason, mbError, MB_OK)
    else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
      XMLNode := XMLDocument.selectSingleNode(APath);
      try Result := XMLNode.text except Log('WARNING: Game client was not found in the XML.') end;
    end;
  except
    MsgBox('An error occured!' + #13#10 + GetExceptionMessage, mbError, MB_OK);
  end;
end;

function LoadValueFromXMLString(const AString, APath: string): string;
var
  XMLNode: Variant;
  XMLDocument: Variant;  
begin
  Result := '';
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.loadXML(AString);
    if (XMLDocument.parseError.errorCode <> 0) then
      MsgBox('Файл XML повреждён. ' + 
        XMLDocument.parseError.reason, mbError, MB_OK)
    else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
      XMLNode := XMLDocument.selectSingleNode(APath);
      Result := XMLNode.text;
    end;
  except
    MsgBox('An error occured!' + #13#10 + GetExceptionMessage, mbError, MB_OK);
  end;
end;

function GetVersion(Param: String): String;
var
  FilePath: String;
begin
  FilePath := ExpandConstant('{app}\paths.xml');
  if FileExists(FilePath) then
    Result := ExtractFileName(LoadValueFromXML(FilePath, '//root/Paths/Path'))
  else Result := CurVersion;
end;

function GetExecutableName(Param: String): String;
var
  FilePath: String;
begin
  FilePath := ExpandConstant('{app}\WorldOfTanks.exe');
  if FileExists(FilePath) then
    Result := 'WorldOfTanks.exe'
  else Result := 'Tanki.exe';
end;

procedure CheckForFile(SelectedDir: String);
var
  FilePath: String;
  FoundVersion: String;
  VerArray: TArrayOfString;
  MajorVersion: Integer;
  MiddleVersion: Integer;
  MinorVersion: Integer;
begin
  FilePath := ExpandConstant(SelectedDir + '\' + CheckFileName);
  if FileExists(FilePath) then
  begin
    FoundVersion := ExtractFileName(LoadValueFromXML(FilePath, '//root/Paths/Path'));
    VerArray := StrSplit(FoundVersion, '.');
    MajorVersion := StrToInt(VerArray[1]);
    MiddleVersion := StrToInt(VerArray[2]);
    MinorVersion := StrToInt(VerArray[3]);
    IsWoTExecFound := true;
    FileStatusLabel.Caption := Format(CustomMessage('FoundVersion'), [FoundVersion]);
    FileStatusLabel.Font.Color := clBlack
    
    if MajorVersion > CurMajorVersion then
    begin
      VersionStatusLabel.Caption := Format(CustomMessage('MajVerMismatch'), [CurVersion]);
      VersionStatusLabel.Font.Color := clRed;
    end
    else if (MiddleVersion > CurMiddleVersion) and (MajorVersion = CurMajorVersion) then
    begin
      VersionStatusLabel.Caption := Format(CustomMessage('MidVerMismatch'), [CurVersion]);
      VersionStatusLabel.Font.Color := $0060FF;
    end
    else if (MinorVersion > CurMinorVersion) and (MiddleVersion = CurMiddleVersion) and (MajorVersion = CurMajorVersion) then
    begin
      VersionStatusLabel.Caption := Format(CustomMessage('MinVerMismatch'), [CurVersion]);
      VersionStatusLabel.Font.Color := clGreen;
    end
    else if (MinorVersion = CurMinorVersion) and (MiddleVersion = CurMiddleVersion) and (MajorVersion = CurMajorVersion) then
    begin
      VersionStatusLabel.Caption := CustomMessage('VerMatch');
      VersionStatusLabel.Font.Color := clGreen;
    end
    else
    begin
      VersionStatusLabel.Caption := CustomMessage('OldVer');
      VersionStatusLabel.Font.Color := clRed;
    end;
  end
  else
  begin
    IsWoTExecFound := false;
    FileStatusLabel.Caption := CustomMessage('ClientNotFound');
    FileStatusLabel.Font.Color := clRed;
    VersionStatusLabel.Caption := '';
  end;
end;

procedure OpenBrowser(Sender: TObject);
var
  ErrorCode: Integer;
  Button: TButton;
begin
  Button := Sender as TButton;
  if Button.Caption = CustomMessage('WebsiteButton') then
    ShellExec('open', 'https://wot-classic.ru', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode)
  else if Button.Caption = 'Discord' then
    ShellExec('open', 'https://discord.gg/36mrMDeFMJ', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
end;

procedure CreateWelcomeButtons;
begin
  if (SiteButton = nil) and (DiscordButton = nil) then
  begin
    SiteButton := TButton.Create(WizardForm);
    with SiteButton do
    begin
      Parent := WizardForm;
      Left := ScaleX(16);
      Top := WizardForm.NextButton.Top;
      Width := WizardForm.NextButton.Width;
      Height := WizardForm.NextButton.Height;
      Caption := CustomMessage('WebsiteButton')
      OnClick := @OpenBrowser;
    end;
    
    DiscordButton := TButton.Create(WizardForm);
    with DiscordButton do
    begin
      Parent := WizardForm;
      Left := SiteButton.Left + SiteButton.Width + 8;
      Top := WizardForm.NextButton.Top;
      Width := WizardForm.NextButton.Width;
      Height := WizardForm.NextButton.Height;
      Caption := 'Discord'
      OnClick := @OpenBrowser;
    end;
  end;
end;

procedure DestroyWelcomeButtons;
begin
  if (SiteButton <> nil) and (DiscordButton <> nil) then
  begin
    SiteButton.Free;
    SiteButton := nil;
    DiscordButton.Free;
    DiscordButton := nil;
  end;
end;

function GetLestaGamePath(Param: String): String;
var
  LGCPath: String;
begin
  try
    if not RegQueryStringValue(HKEY_CURRENT_USER, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\Lesta Game Center', 'DisplayIcon', LGCPath) then begin
      if not RegQueryStringValue(HKEY_LOCAL_MACHINE, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\Lesta Game Center', 'DisplayIcon', LGCPath) then
        Result := 'C:\Games\Tanki';
        Exit;
    end;
    LGCPath := ExtractFileDir(LGCPath);
    Result := LoadValueFromXML(LGCPath+'\preferences.xml', '//protocol/application/games_manager/selectedGames/WOT');
  except
    Result := 'C:\Games\Tanki';
  end;
end;

procedure CurPageChanged(CurPageID: Integer);
begin
  if (CurPageID = wpWelcome) or (CurPageID = wpFinished) then
    CreateWelcomeButtons
  else
    DestroyWelcomeButtons;
  if CurPageID = wpSelectDir then
  begin
    CheckForFile(WizardForm.DirEdit.Text);
  end;
end;

// procedure CurStepChanged(CurStep: TSetupStep);
// begin
//   if CurStep = ssPostInstall then
//   begin
//     // DeleteFile(ExpandConstant('{app}') + '\mods\' + GetVersion('') + '\wek_sd_models\ru.wot-classic.sd_germany.wotmod');
//     // DeleteFile(ExpandConstant('{app}') + '\mods\' + GetVersion('') + '\wek_locale_ru\ru.wot-classic.locale_ru.wotmod');
//     // DelTree(ExpandConstant('{app}') + '\mods\' + GetVersion('') + '\wek_battle_gui', True, True, True);
//     // DelTree(ExpandConstant('{app}') + '\mods\' + GetVersion('') + '\wek_sounds', True, True, True);
//     // DelTree(ExpandConstant('{app}') + '\mods\' + GetVersion('') + '\wek_hangars', True, True, True);
//   end;
// end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if (CurPageID = wpSelectDir) and (not IsWoTExecFound) then
  begin
    if MsgBox(CustomMessage('NotFoundConfirm'),
              mbError,
              MB_YESNO or MB_DEFBUTTON2) = IDYES
      then Result := True
    else Result := False;
  end
  else Result := True;
end;

procedure DirEditChange(Sender: TObject);
begin
  CheckForFile(WizardForm.DirEdit.Text);
end;

function CheckLatestVersion: String;
var
  WinHttpReq: Variant;
begin
  WinHttpReq := CreateOleObject('WinHttp.WinHttpRequest.5.1');
  WinHttpReq.Open('GET', 'https://wot-classic.ru/installer.xml', false);
  WinHttpReq.Send();
  // WinHttpReq.ResponseText will hold the server response
  Result := WinHttpReq.ResponseText;
end;

function InitializeSetup: Boolean;
var
  ErrorCode: Integer;
  RequestText: String;
begin
  Result := True;
  try
    RequestText := CheckLatestVersion();
    LatestMajorVersion := StrToInt(LoadValueFromXMLString(RequestText, '//root/tiger/major'));
    LatestMiddleVersion := StrToInt(LoadValueFromXMLString(RequestText, '//root/tiger/middle'));
    LatestMinorVersion := StrToInt(LoadValueFromXMLString(RequestText, '//root/tiger/minor'));
    LatestBuild := StrToInt(LoadValueFromXMLString(RequestText, '//root/tiger/build'));
    LatestLink := LoadValueFromXMLString(RequestText, '//root/tiger/link');
    
    if LatestBuild > CurBuild then
    begin
      case MsgBox(CustomMessage('NewVerAvailable'), mbConfirmation, MB_YESNO) of 
        IDYES:
          begin
            ShellExec('open', LatestLink, '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
            Result := False;
          end;
      end;
    end
    else if LatestBuild < CurBuild then
    begin
      IsDevBuild := true;
      SuppressibleMsgBox(CustomMessage('DevBuild'), mbError, MB_OK, IDOK);
    end;
  except
  end;
end;

procedure InitializeWizard;
begin
  WizardForm.DirEdit.OnChange := @DirEditChange;
  
  // CreateWelcomeButtons;
  
  // if ActiveLanguage = 'en' then WizardSelectComponents('l18n/en');
  
  Log(WizardForm.BackButton.Caption);
  
  FileStatusLabel := TLabel.Create(WizardForm);
  with FileStatusLabel do
  begin
    Parent := WizardForm.SelectDirPage;
    Top := WizardForm.DirEdit.Top + WizardForm.DirEdit.Height + 8;
    Left := WizardForm.DirEdit.Left;
  end;

  VersionStatusLabel := TLabel.Create(WizardForm);
  with VersionStatusLabel do
  begin
    Parent := WizardForm.SelectDirPage;
    Top := WizardForm.DirEdit.Top + WizardForm.DirEdit.Height + 8 + FileStatusLabel.Height + 8;
    Left := WizardForm.DirEdit.Left;
  end;

  WizardForm.TasksList.Height := 24;
end;

// function BackupFolderPath: string;
// begin
//   Result := AddBackslash(ExpandConstant('{app}')) + 'wek_tiger_uninst\backup';
// end;
// 
// function ModsFolderPath: string;
// begin
//   Result := AddBackslash(ExpandConstant('{app}')) + 'mods';
// end;
// 
// procedure MoveFilesAndFolders(SourceDir, DestDir: string);
// var
//   FindRec: TFindRec;
//   SourcePath: string;
//   DestPath: string;
// begin
//   if FindFirst(SourceDir + '\*.*', FindRec) then
//   begin
//     try
//       repeat
//         if (FindRec.Name <> '.') and (FindRec.Name <> '..') then
//         begin
//           SourcePath := SourceDir + '\' + FindRec.Name;
//           DestPath := DestDir + '\' + FindRec.Name;
// 
//           if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY <> 0 then
//           begin
//             // It's a directory, create the directory in the destination and move its content recursively
//             if not DirExists(DestPath) then
//             begin
//               Log(Format('Creating directory %s', [DestPath]));
//               if not CreateDir(DestPath) then
//               begin
//                 Log(Format('Failed to create directory %s', [DestPath]));
//                 Exit;
//               end;
//             end;
//             MoveFilesAndFolders(SourcePath, DestPath);  // Recursive call
//             RemoveDir(SourcePath);  // Remove the directory after moving all content
//           end
//           else
//           begin
//             // It's a file, move it
//             Log(Format('Moving file %s to %s', [SourcePath, DestPath]));
//             if not RenameFile(SourcePath, DestPath) then
//             begin
//               Log(Format('Failed to move file %s to %s', [SourcePath, DestPath]));
//             end;
//           end;
//         end;
//       until not FindNext(FindRec);
//     finally
//       FindClose(FindRec);
//     end;
//   end;
// end;
// 
// procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
// begin
//   if CurUninstallStep = usPostUninstall then
//   begin
//     Log('Starting to move backup files to mods folder');
//     MoveFilesAndFolders(BackupFolderPath, ModsFolderPath);
//     Log('Finished moving files and folders');
//   end;
// end;
