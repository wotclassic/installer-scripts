; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define BuildNumber "3"
#define GameVer "1.33.0.0"
#define GameMajorVer "33"
#define GameMiddleVer "0"
#define GameMinorVer "0"

#define MyAppName "«WэК!» - Темная сторона Марса - Запретная зона"
#define MyAppVersion GameVer+"#"+BuildNumber
#define AppBuild GameVer+"_"+BuildNumber
#define MyAppPublisher "Mr. Bendy"
#define MyAppURL "https://wot-classic.ru/"

[Setup]
AppId={{48C5FC30-9FDE-45BA-BC7F-E9FCFB29395E}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
OutputBaseFilename=wek_dangerzone_lesta_{#AppBuild}
ArchitecturesAllowed=x64compatible

DefaultDirName={code:GetLestaGamePath}

DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
Compression=lzma2/normal
;Compression=none
SolidCompression=yes
LZMAUseSeparateProcess=no
LZMANumBlockThreads=4
DiskSpanning=no

WizardStyle=classic
WizardImageFile=wizard.bmp
WizardSmallImageFile=small.bmp
SetupIconFile=wot.ico
; InfoBeforeFile=infobefore.txt

Uninstallable=WizardIsTaskSelected('uninstallable')
UninstallFilesDir={app}\wek_dangerzone_uninst
CreateUninstallRegKey=yes

DirExistsWarning=no
DisableDirPage=no
; Change to auto before releasing
ShowLanguageDialog=no
DisableWelcomePage=no
FlatComponentsList=no
RestartIfNeededByRun=no
AppendDefaultDirName=no

[Languages]
; Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "russian"; MessagesFile: "Russian.isl"

[Tasks]
; Name: "cleanmods"; Description: "Удалить все установленные моды (настоятельно рекомендуется)"
Name: "uninstallable"; Description: "Создать программу удаления"

[InstallDelete]
; Type: filesandordirs; Name: "{app}\mods\{code:GetVersion}\*"; Tasks: "cleanmods"
; Type: filesandordirs; Name: "{app}\mods\configs"; Tasks: "cleanmods"
; Type: filesandordirs; Name: "{app}\res_mods\{code:GetVersion}\*"; Tasks: "cleanmods"

[Files]
Source: "files\wek_dangerzone\mods\*"; DestDir: "{app}\mods\{code:GetVersion}\wek_dangerzone"; Flags: ignoreversion recursesubdirs createallsubdirs skipifsourcedoesntexist
Source: "files\wek_dangerzone\res_mods\*"; DestDir: "{app}\res_mods\{code:GetVersion}"; Flags: ignoreversion recursesubdirs createallsubdirs skipifsourcedoesntexist
Source: "files\wek_sounds\mods\*"; DestDir: "{app}\mods\{code:GetVersion}\wek_sounds"; Flags: ignoreversion recursesubdirs createallsubdirs skipifsourcedoesntexist

; Source: "..\files\graphics\maps\mods\*"; DestDir: "{app}\mods\{code:GetVersion}\wek_maps"; Flags: recursesubdirs createallsubdirs skipifsourcedoesntexist onlyifdoesntexist
; Source: "..\files\graphics\maps\res_mods\*"; DestDir: "{app}\res_mods\{code:GetVersion}"; Flags: recursesubdirs createallsubdirs skipifsourcedoesntexist

Source: "{app}\mods\{code:GetVersion}\wek_sounds\ru.wot-classic.sounds_1.4.wotmod"; DestDir: "{app}\wek_dangerzone_uninst\backup\{code:GetVersion}\wek_sounds"; Flags: external skipifsourcedoesntexist uninsneveruninstall

[Run]
Filename: "{app}\{code:GetExecutableName}"; Description: "Запустить игру"; Flags: nowait postinstall skipifsilent unchecked

[Messages]
WelcomeLabel2=Программа установит мод [name] версии {#MyAppVersion} для «Мира Танков».%n%nРекомендуется закрыть клиент игры перед тем, как продолжить.

[Code]
const
  CheckFileName = 'paths.xml';
  CurVersion = '{#GameVer}';
  CurMajorVersion = {#GameMajorVer};
  CurMiddleVersion = {#GameMiddleVer};
  CurMinorVersion = {#GameMinorVer};
  CurBuild = {#BuildNumber};
  
var
  FileStatusLabel: TLabel;
  VersionStatusLabel: TLabel;
  IsWoTExecFound: Boolean;
  SiteButton: TButton;
  DiscordButton: TButton;
  // CleanModsLabel: TLabel;
  // LatestMajorVersion: Integer;
  // LatestMiddleVersion: Integer;
  // LatestMinorVersion: Integer;
  // LatestBuild: Integer;

function StrSplit(Text: String; Separator: String): TArrayOfString;
var
  i, p: Integer;
  Dest: TArrayOfString; 
begin
  i := 0;
  repeat
    SetArrayLength(Dest, i+1);
    p := Pos(Separator,Text);
    if p > 0 then begin
      Dest[i] := Copy(Text, 1, p-1);
      Text := Copy(Text, p + Length(Separator), Length(Text));
      i := i + 1;
    end else begin
      Dest[i] := Text;
      Text := '';
    end;
  until Length(Text)=0;
  Result := Dest
end;

function LoadValueFromXML(const AFileName, APath: string): string;
var
  XMLNode: Variant;
  XMLDocument: Variant;  
begin
  Result := '';
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.load(AFileName);
    if (XMLDocument.parseError.errorCode <> 0) then
      MsgBox('Файл XML повреждён. ' + 
        XMLDocument.parseError.reason, mbError, MB_OK)
    else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
      XMLNode := XMLDocument.selectSingleNode(APath);
      try Result := XMLNode.text except Log('WARNING: Game client was not found in the XML.') end;
    end;
  except
    MsgBox('An error occured!' + #13#10 + GetExceptionMessage, mbError, MB_OK);
  end;
end;

function LoadValueFromXMLString(const AString, APath: string): string;
var
  XMLNode: Variant;
  XMLDocument: Variant;  
begin
  Result := '';
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.loadXML(AString);
    if (XMLDocument.parseError.errorCode <> 0) then
      MsgBox('Файл XML повреждён. ' + 
        XMLDocument.parseError.reason, mbError, MB_OK)
    else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
      XMLNode := XMLDocument.selectSingleNode(APath);
      Result := XMLNode.text;
    end;
  except
    MsgBox('An error occured!' + #13#10 + GetExceptionMessage, mbError, MB_OK);
  end;
end;

function GetVersion(Param: String): String;
var
  FilePath: String;
begin
  FilePath := ExpandConstant('{app}\paths.xml');
  if FileExists(FilePath) then
    Result := ExtractFileName(LoadValueFromXML(FilePath, '//root/Paths/Path'))
  else Result := CurVersion;
end;

function GetExecutableName(Param: String): String;
var
  FilePath: String;
begin
  FilePath := ExpandConstant('{app}\WorldOfTanks.exe');
  if FileExists(FilePath) then
    Result := 'WorldOfTanks.exe'
  else Result := 'Tanki.exe';
end;

procedure CheckForFile(SelectedDir: String);
var
  FilePath: String;
  FoundVersion: String;
  VerArray: TArrayOfString;
  MajorVersion: Integer;
  MiddleVersion: Integer;
  MinorVersion: Integer;
begin
  FilePath := ExpandConstant(SelectedDir + '\' + CheckFileName);
  if FileExists(FilePath) then
  begin
    FoundVersion := ExtractFileName(LoadValueFromXML(FilePath, '//root/Paths/Path'));
    VerArray := StrSplit(FoundVersion, '.');
    MajorVersion := StrToInt(VerArray[1]);
    MiddleVersion := StrToInt(VerArray[2]);
    MinorVersion := StrToInt(VerArray[3]);
    IsWoTExecFound := true;
    FileStatusLabel.Caption := Format('Найден клиент «Мира Танков» версии %s.', [FoundVersion]);
    FileStatusLabel.Font.Color := clBlack
    
    if MajorVersion > CurMajorVersion then
    begin
      VersionStatusLabel.Caption := Format('Моды создавались для версии %s, и их работоспособность не'#13#10'гарантируется. Рекомендуем проверить наличие более свежей версии на нашем'#13#10'портале.', [CurVersion]);
      VersionStatusLabel.Font.Color := clRed;
    end
    else if (MiddleVersion > CurMiddleVersion) and (MajorVersion = CurMajorVersion) then
    begin
      VersionStatusLabel.Caption := Format('Моды создавались для версии %s, поэтому есть вероятность'#13#10'возникновения проблем совместимости.', [CurVersion]);
      VersionStatusLabel.Font.Color := $0060FF;
    end
    else if (MinorVersion > CurMinorVersion) and (MiddleVersion = CurMiddleVersion) and (MajorVersion = CurMajorVersion) then
    begin
      VersionStatusLabel.Caption := Format('Моды создавались для версии %s, но шанс возникновения проблем'#13#10'минимален.', [CurVersion]);
      VersionStatusLabel.Font.Color := clGreen;
    end
    else if (MinorVersion = CurMinorVersion) and (MiddleVersion = CurMiddleVersion) and (MajorVersion = CurMajorVersion) then
    begin
      VersionStatusLabel.Caption := 'Моды полностью совместимы с данной версией игры.';
      VersionStatusLabel.Font.Color := clGreen;
    end
    else
    begin
      VersionStatusLabel.Caption := 'Ваша игра устарела. Обновите клиент перед установкой модов.';
      VersionStatusLabel.Font.Color := clRed;
    end;
  end
  else
  begin
    IsWoTExecFound := false;
    FileStatusLabel.Caption := 'Клиент игры не найден. Пожалуйста, проверьте указанный путь.';
    FileStatusLabel.Font.Color := clRed;
    VersionStatusLabel.Caption := '';
  end;
end;

procedure OpenBrowser(Sender: TObject);
var
  ErrorCode: Integer;
  Button: TButton;
begin
  Button := Sender as TButton;
  if Button.Caption = 'Наш сайт' then
    ShellExec('open', 'https://wot-classic.ru', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode)
  else if Button.Caption = 'Discord' then
    ShellExec('open', 'https://discord.gg/36mrMDeFMJ', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
end;

procedure CreateWelcomeButtons;
begin
  if (SiteButton = nil) and (DiscordButton = nil) then
  begin
    SiteButton := TButton.Create(WizardForm);
    with SiteButton do
    begin
      Parent := WizardForm;
      Left := ScaleX(16);
      Top := WizardForm.NextButton.Top;
      Width := WizardForm.NextButton.Width;
      Height := WizardForm.NextButton.Height;
      Caption := 'Наш сайт'
      OnClick := @OpenBrowser;
    end;
    
    DiscordButton := TButton.Create(WizardForm);
    with DiscordButton do
    begin
      Parent := WizardForm;
      Left := SiteButton.Left + SiteButton.Width + 8;
      Top := WizardForm.NextButton.Top;
      Width := WizardForm.NextButton.Width;
      Height := WizardForm.NextButton.Height;
      Caption := 'Discord'
      OnClick := @OpenBrowser;
    end;
  end;
end;

procedure DestroyWelcomeButtons;
begin
  if (SiteButton <> nil) and (DiscordButton <> nil) then
  begin
    SiteButton.Free;
    SiteButton := nil;
    DiscordButton.Free;
    DiscordButton := nil;
  end;
end;

function GetLestaGamePath(Param: String): String;
var
  LGCPath: String;
begin
  try
    if not RegQueryStringValue(HKEY_CURRENT_USER, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\Lesta Game Center', 'DisplayIcon', LGCPath) then begin
      if not RegQueryStringValue(HKEY_LOCAL_MACHINE, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\Lesta Game Center', 'DisplayIcon', LGCPath) then
        Result := 'C:\Games\Tanki';
        Exit;
    end;
    LGCPath := ExtractFileDir(LGCPath);
    Result := LoadValueFromXML(LGCPath+'\preferences.xml', '//protocol/application/games_manager/selectedGames/WOT');
  except
    Result := 'C:\Games\Tanki';
  end;
end;

procedure CurPageChanged(CurPageID: Integer);
begin
  if (CurPageID = wpWelcome) or (CurPageID = wpFinished) then
    CreateWelcomeButtons
  else
    DestroyWelcomeButtons;
  if CurPageID = wpSelectDir then
  begin
    CheckForFile(WizardForm.DirEdit.Text);
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    // DeleteFile(ExpandConstant('{app}') + '\mods\' + GetVersion('') + '\wek_sd_models\ru.wot-classic.sd_germany.wotmod');
    // DeleteFile(ExpandConstant('{app}') + '\mods\' + GetVersion('') + '\wek_sounds\ru.wot-classic.sounds_1.4.wotmod');
    // DelTree(ExpandConstant('{app}') + '\mods\' + GetVersion('') + '\wek_battle_gui', True, True, True);
    // DelTree(ExpandConstant('{app}') + '\mods\' + GetVersion('') + '\wek_hangars', True, True, True);
  end;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if (CurPageID = wpSelectDir) and (not IsWoTExecFound) then
  begin
    if MsgBox('Установщик не смог найти файлы игры по указанному пути.'#13#10''#13#10'Вы уверны, что хотите продолжить установку?',
              mbError,
              MB_YESNO or MB_DEFBUTTON2) = IDYES
      then Result := True
    else Result := False;
  end
  else Result := True;
end;

procedure DirEditChange(Sender: TObject);
begin
  CheckForFile(WizardForm.DirEdit.Text);
end;

// function CheckLatestVersion: String;
// var
//   WinHttpReq: Variant;
// begin
//   WinHttpReq := CreateOleObject('WinHttp.WinHttpRequest.5.1');
//   WinHttpReq.Open('GET', 'https://download.wot-classic.ru/manifest.xml', false);
//   WinHttpReq.Send();
//   // WinHttpReq.ResponseText will hold the server response
//   Result := WinHttpReq.ResponseText;
// end;

// function InitializeSetup: Boolean;
// var
//   ErrorCode: Integer;
//   RequestText: String;
// begin
//   Result := True;
//   try
//     RequestText := CheckLatestVersion();
//     LatestMajorVersion := StrToInt(LoadValueFromXMLString(RequestText, '//root/latest/major'));
//     LatestMiddleVersion := StrToInt(LoadValueFromXMLString(RequestText, '//root/latest/middle'));
//     LatestMinorVersion := StrToInt(LoadValueFromXMLString(RequestText, '//root/latest/minor'));
//     LatestBuild := StrToInt(LoadValueFromXMLString(RequestText, '//root/latest/build'));
//     
//     if LatestBuild > CurBuild then
//     begin
//       case MsgBox('Доступна новая версия установщика. Хотите скачать её?', mbConfirmation, MB_YESNO) of 
//         IDYES:
//           begin
//             ShellExec('open', 'https://download.wot-classic.ru/wek_install_lesta.exe', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
//             Result := False;
//           end;
//       end;
//     end;
//   except
//   end;
// end;

procedure InitializeWizard;
begin
  WizardForm.DirEdit.OnChange := @DirEditChange;
  
  // CreateWelcomeButtons;
  
  Log(WizardForm.BackButton.Caption);
  
  FileStatusLabel := TLabel.Create(WizardForm);
  with FileStatusLabel do
  begin
    Parent := WizardForm.SelectDirPage;
    Top := WizardForm.DirEdit.Top + WizardForm.DirEdit.Height + 8;
    Left := WizardForm.DirEdit.Left;
  end;

  VersionStatusLabel := TLabel.Create(WizardForm);
  with VersionStatusLabel do
  begin
    Parent := WizardForm.SelectDirPage;
    Top := WizardForm.DirEdit.Top + WizardForm.DirEdit.Height + 8 + FileStatusLabel.Height + 8;
    Left := WizardForm.DirEdit.Left;
  end;

  WizardForm.TasksList.Height := 24;

  // CleanModsLabel := TLabel.Create(WizardForm);
  // with CleanModsLabel do
  // begin
  //   Parent := WizardForm.SelectTasksPage;
  //   Top := 180;
  //   Left := WizardForm.TasksList.Left;
  //   Caption := ExpandConstant('Использование модов из серии «WoT это Классика!» вместе с модами от других'#13#10'разработчиков может привести к ошибкам в работе модификаций и даже к'#13#10'отказу работоспособности игры.');
  //   Font.Color := clRed;
  // end;
end;

function BackupFolderPath: string;
begin
  Result := AddBackslash(ExpandConstant('{app}')) + 'wek_dangerzone_uninst\backup';
end;

function ModsFolderPath: string;
begin
  Result := AddBackslash(ExpandConstant('{app}')) + 'mods';
end;

procedure MoveFilesAndFolders(SourceDir, DestDir: string);
var
  FindRec: TFindRec;
  SourcePath: string;
  DestPath: string;
begin
  if FindFirst(SourceDir + '\*.*', FindRec) then
  begin
    try
      repeat
        if (FindRec.Name <> '.') and (FindRec.Name <> '..') then
        begin
          SourcePath := SourceDir + '\' + FindRec.Name;
          DestPath := DestDir + '\' + FindRec.Name;

          if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY <> 0 then
          begin
            // It's a directory, create the directory in the destination and move its content recursively
            if not DirExists(DestPath) then
            begin
              Log(Format('Creating directory %s', [DestPath]));
              if not CreateDir(DestPath) then
              begin
                Log(Format('Failed to create directory %s', [DestPath]));
                Exit;
              end;
            end;
            MoveFilesAndFolders(SourcePath, DestPath);  // Recursive call
            RemoveDir(SourcePath);  // Remove the directory after moving all content
          end
          else
          begin
            // It's a file, move it
            Log(Format('Moving file %s to %s', [SourcePath, DestPath]));
            if not RenameFile(SourcePath, DestPath) then
            begin
              Log(Format('Failed to move file %s to %s', [SourcePath, DestPath]));
            end;
          end;
        end;
      until not FindNext(FindRec);
    finally
      FindClose(FindRec);
    end;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usPostUninstall then
  begin
    Log('Starting to move backup files to mods folder');
    MoveFilesAndFolders(BackupFolderPath, ModsFolderPath);
    Log('Finished moving files and folders');
  end;
end;
